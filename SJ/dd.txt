test\

자바스크립트 객체

객체와 비슷한 개념 : 배열
 배열 - 순서에 따라 정보를 정리
 객체 - 순서가 없는 정보를 저장하는 데 최적
           (숫자 식별자가 아닌 이름으로 식별)

코드 object.js
 배열과 객체의 차이?
 멤버스 배열 생성
  - 두번째 정보는 members[1]로 호출

 배열은 []로 표시하나
 객체는 {}로
 var roles = {'a':'AA',...}
 각각의 데이터마다 이름을 부여
 객체는 .으로 특정 정보를 가져온다.(배열처럼 []도 가능하다)
 
배열의 반복문은 알다시피 while문에서 <members.length 이런 형태로

for(변수 in 객체){
 변수, 객체[변수]
}
변수이름 -> 객체에 있는 key 값이 전부 표시
객체[변수] -> 해당 key에 담긴 정보 표시


객체지향 프로그래밍 OOP
 프로그래밍 - 데이터, 처리

 처리방법을 함수로 묶고 이름을 붙인다.
 
<***>
 근데 자바스크립트에서 함수는 처리과정에 대한 일종의 구문이면서,
 동시에 값이다. [변수에 넣을 수 있는 것!!!]

 조건문은 값이 아니므로 변수에 넣을 수 없다.

 다른 구문과 달리 함수는 값이 될 수 있다.
 배열의 원소로서 함수가 존재할 수 있고, 객체의 값으로도 넣을 수 잇다.
 

 처리방법을 그룹핑하는 함수도 데이터로, 배열과 객체에 담을 수 있다.

함수는 배열에 거의 담지는 않는다. (쓸모 없으므로)
그러나, 객체에는 많이 담는다. (객체에는 이름을 붙일 수 있으므로)

 이 부분은 실용적이지는 않다.

 수많은 변수(예 1억개)가 다 개별적으로 존재한다면, 많은 문제가 생길 것
 버그 찾는 것도 매우 어려워질 것

 객체를 하나 만들어서 서로 연관된 값들을 하나의 객체 안에 정리정돈해서
넣을 수 있다.

객체 안에 연관되는 각각의 함수들을 추가

함수가 객체 안에서 사용할 때
자신의 함수가 속해있는 객체의 다른 내용을 참조할 때 사용하는 코드 -> this

객체는 코드를 정리정돈하기 위한 기본적인 기능에서 출발한다.

그 본질을 이해한다면, 객체의 다른 기능도 쉽게 이해가 될 것

APP
객체를 이용하여 템플릿 정리

템플릿이라는 이름의 객체를 생성 -> html이라는 프로퍼티를 생성
 html템플릿함수를 잘라내서 붙여넣기(함수이름 제거)
list라는 프로퍼티 생성 -> 템플릿list함수 잘라내서 붙여넣기

이제 이름이 아닌 객체에 따라서 정리정돈이 가능해졌다.

코드의 양이 기하급수적으로 늘어날수록, 객체에 의한 정리정돈은 중요해진다.

이전 코드와 동작방법은 동일하면서, 효율은 올리는 방법(내부개선) -> 리팩토링
 리팩토링은 굉장히 중요, 이게 가능하다면, 매우 뛰어난 프로그래밍을 할 줄 안다는 것


